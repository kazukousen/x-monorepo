// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package detailv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DetailServiceClient is the client API for DetailService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DetailServiceClient interface {
	GetDetails(ctx context.Context, in *GetDetailsRequest, opts ...grpc.CallOption) (*GetDetailsResponse, error)
}

type detailServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDetailServiceClient(cc grpc.ClientConnInterface) DetailServiceClient {
	return &detailServiceClient{cc}
}

func (c *detailServiceClient) GetDetails(ctx context.Context, in *GetDetailsRequest, opts ...grpc.CallOption) (*GetDetailsResponse, error) {
	out := new(GetDetailsResponse)
	err := c.cc.Invoke(ctx, "/detail.v1.DetailService/GetDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DetailServiceServer is the server API for DetailService service.
// All implementations should embed UnimplementedDetailServiceServer
// for forward compatibility
type DetailServiceServer interface {
	GetDetails(context.Context, *GetDetailsRequest) (*GetDetailsResponse, error)
}

// UnimplementedDetailServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDetailServiceServer struct {
}

func (UnimplementedDetailServiceServer) GetDetails(context.Context, *GetDetailsRequest) (*GetDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetails not implemented")
}

// UnsafeDetailServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DetailServiceServer will
// result in compilation errors.
type UnsafeDetailServiceServer interface {
	mustEmbedUnimplementedDetailServiceServer()
}

func RegisterDetailServiceServer(s grpc.ServiceRegistrar, srv DetailServiceServer) {
	s.RegisterService(&DetailService_ServiceDesc, srv)
}

func _DetailService_GetDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetailServiceServer).GetDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/detail.v1.DetailService/GetDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetailServiceServer).GetDetails(ctx, req.(*GetDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DetailService_ServiceDesc is the grpc.ServiceDesc for DetailService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DetailService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "detail.v1.DetailService",
	HandlerType: (*DetailServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDetails",
			Handler:    _DetailService_GetDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "detail/v1/detail.proto",
}
